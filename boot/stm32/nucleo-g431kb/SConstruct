import os

cross_compiler = "arm-none-eabi-"
mcuboot_root = "/mnt/d/Marcelo/bitbucket/mcuboot/mcuboot/"
TARGET='mcuboot_firmware'

all_incs = [
    os.path.join(mcuboot_root,'ext/mbedtls/include'),
    os.path.join(mcuboot_root,'boot/stm32/nucleo-g431kb'),
    os.path.join(mcuboot_root,'boot/bootutil/include'),
    os.path.join(mcuboot_root,'boot/bootutil'),
    os.path.join(mcuboot_root,'boot/stm32/nucleo-g431kb/hal/Core/Inc'),
    os.path.join(mcuboot_root,'boot/stm32/nucleo-g431kb/hal/Drivers/STM32G4xx_HAL_Driver/Inc'),
    os.path.join(mcuboot_root,'boot/stm32/nucleo-g431kb/hal/Drivers/STM32G4xx_HAL_Driver/Inc/Legacy'),
    os.path.join(mcuboot_root,'boot/stm32/nucleo-g431kb/hal/Drivers/CMSIS/Include'),
    os.path.join(mcuboot_root,'boot/stm32/nucleo-g431kb/hal/Drivers/CMSIS/Device/ST/STM32G4xx/Include'),
    ]

tools = [
    ('AR','ar'),
    ('AS','gcc -x assembler-with-cpp'),
    ('CC','gcc'),
    ('CXX','g++'),
    ('LD','g++'),
    ('LINK','gcc'),
    ('STRIP','strip'),
    ('RANLIB','ranlib'),
    ('OBJCOPY','objcopy'),
    ('OBJDUMP','objdump'),
    ('SIZE','size'),
]

DEFS = [    
    '-DUSE_HAL_DRIVER',
    '-DSTM32G431xx',
]
LDSCRIPT = os.path.join(mcuboot_root,'boot/stm32/nucleo-g431kb/hal/','STM32G431KBTx_FLASH.ld')
MAPFILE = os.path.join(mcuboot_root,'boot/stm32/nucleo-g431kb/hal/',TARGET+'.map')

cflags = [
    '-mthumb',
    '-mcpu=cortex-m4',
    '-mfpu=fpv4-sp-d16',
    '-mfloat-abi=hard',
    '-nostdlib',
    '-nostartfiles',
    '-Wall',
    '-fdata-sections',
    '-ffunction-sections',
    '-g',
    '-pedantic',
    '-std=c11',
    '-specs=nano.specs',
    '-I.',
#    '-fstack-usage',
]

ldflags = [
    '-mthumb',
    '-mcpu=cortex-m4',
    '-mfpu=fpv4-sp-d16',
    '-mfloat-abi=hard',
    '-specs=nano.specs',
    '-Wl,--gc-sections',
    '-static',
    '-u _printf_float',
    '-Wall',
    '-lc',
    '-lm',
    '-lnosys', 
    '-Wl,-Map="{}",--cref'.format(MAPFILE),
    '-T"{}"'.format(LDSCRIPT),
]

cflags += DEFS
ldflags += DEFS

env = Environment(
    CCFLAGS = cflags,
    ASFLAGS = cflags,
    LINKFLAGS = ldflags,
    CPPPATH = all_incs,
)

for (tool, name) in tools:
    env[tool] = cross_compiler + name

env['ENV']['TERM'] = os.environ['TERM']

objd_flags = [] 
srcs = { 
    'boot/bootutil/src': [ 
        'boot_record.c',
        'bootutil_misc.c',
        'bootutil_public.c',
        'caps.c',
        'encrypted.c',
        'fault_injection_hardening.c',
        'fault_injection_hardening_delay_rng_mbedtls.c',
        'image_ec.c',
        'image_ec256.c',
        'image_ed25519.c',
        'image_rsa.c',
        'image_validate.c',
        'loader.c',
        'swap_misc.c',
        'swap_move.c',
        'swap_scratch.c',
        'tlv.c'
        ],
    'boot/stm32/nucleo-g431kb': [
        'mcuboot_main.c'
        ],
    'boot/stm32/nucleo-g431kb/hal/Core/Src': [
        'main.c',
        'stm32g4xx_it.c',
        'stm32g4xx_hal_msp.c',
        'system_stm32g4xx.c',
        ],
    'boot/stm32/nucleo-g431kb/hal': [
        'startup_stm32g431xx.S',
        ],        
    'boot/stm32/nucleo-g431kb/hal/Drivers/STM32G4xx_HAL_Driver/Src': [
        'stm32g4xx_hal_tim.c',
        'stm32g4xx_hal_tim_ex.c',
        'stm32g4xx_hal_pwr_ex.c',
        'stm32g4xx_hal_uart.c',
        'stm32g4xx_hal_uart_ex.c',
        'stm32g4xx_hal.c',
        'stm32g4xx_hal_rcc.c',
        'stm32g4xx_hal_rcc_ex.c',
        'stm32g4xx_hal_flash.c',
        'stm32g4xx_hal_flash_ex.c',
        'stm32g4xx_hal_flash_ramfunc.c',
        'stm32g4xx_hal_gpio.c',
        'stm32g4xx_hal_exti.c',
        'stm32g4xx_hal_dma.c',
        'stm32g4xx_hal_dma_ex.c',
        'stm32g4xx_hal_pwr.c',
        'stm32g4xx_hal_cortex.c',
        ],        
    }

all_srcs = []
for pdir,files in srcs.items():
    for f in files:
        all_srcs.append(os.path.join(mcuboot_root,pdir,f))

print("SOURCES:")
print(all_srcs)

print("INCLUDE:")
print(all_incs)
def arm_generator(source, target, env, for_signature):
    return '$OBJDUMP -S -D -marm  %s > %s' % (source[0],target[0])

# env.Append(BUILDERS = {
#     'Objdump': Builder(
#         generator=arm_generator,
#         suffix='.asm'
#     )
# })

def arm_size(source, target, env, for_signature):
    return '$SIZE -d {}'.format(source[0])

env.Append(BUILDERS = {
    'Size': Builder(
        generator=arm_size,
#        suffix='.asm'
    )
})

#for app_name,app_src in srcs.items():
#    s = fixed_srcs + [ os.path.join(srcs_dir,f) for f in app_src ]
prg = env.Program(target=TARGET+'.elf',source=all_srcs)
env.Size(prg)


